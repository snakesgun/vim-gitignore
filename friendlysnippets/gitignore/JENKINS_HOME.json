{
  "JENKINS_HOME": {
    "perfix": "JENKINS_HOME",
    "body": [
      "# Learn more about Jenkins and JENKINS_HOME directory for which this file is\n# intended.\n#\n#  http://jenkins-ci.org/\n#  https://wiki.jenkins-ci.org/display/JENKINS/Administering+Jenkins\n#\n# Note: secret.key is purposefully not tracked by git. This should be backed up\n# separately because configs may contain secrets which were encrypted using the\n# secret.key.  To back up secrets use 'tar -czf /tmp/secrets.tgz secret*' and\n# save the file separate from your repository.  If you want secrets backed up\n# with configuration, then see the bottom of this file for an example.\n\n# Ignore all JENKINS_HOME except jobs directory, root xml config, and\n# .gitignore file.\n/*\n!/jobs\n!/.gitignore\n!/*.xml\n\n# Ignore all files in jobs subdirectories except for folders.\n# Note: git doesn't track folders, only file content.\njobs/**\n!jobs/**/\n\n# Uncomment the following line to save next build numbers with config.\n\n#!jobs/**/nextBuildNumber\n\n# For performance reasons, we want to ignore builds in Jenkins jobs because it\n# contains many tiny files on large installations.  This can impact git\n# performance when running even basic commands like 'git status'.\nbuilds\nindexing\n\n# Exclude only config.xml files in repository subdirectories.\n!config.xml\n\n# Don't track workspaces (when users build on the master).\njobs/**/*workspace\n\n# Security warning: If secrets are included with your configuration, then an\n# adversary will be able to decrypt all encrypted secrets within Jenkins\n# config.  Including secrets is a bad practice, but the example is included in\n# case someone still wants it for convenience.  Uncomment the following line to\n# include secrets for decryption with repository configuration in Git.\n\n#!/secret*\n\n# As a result, only Jenkins settings and job config.xml files in JENKINS_HOME\n# will be tracked by git.\n"
    ],
    "description": "JENKINS_HOME Gitignore Templat"
  }
}